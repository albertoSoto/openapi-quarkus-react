/* tslint:disable */
/* eslint-disable */
/**
 * openapi-backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Fruit } from '../models';
/**
 * FruitResourceApi - axios parameter creator
 * @export
 */
export const FruitResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Fruit} [fruit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fruitsDelete: async (fruit?: Fruit, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fruits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fruit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fruitsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fruits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Fruit} [fruit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fruitsPost: async (fruit?: Fruit, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fruits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fruit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FruitResourceApi - functional programming interface
 * @export
 */
export const FruitResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FruitResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Fruit} [fruit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fruitsDelete(fruit?: Fruit, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<Fruit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fruitsDelete(fruit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FruitResourceApi.fruitsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fruitsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<Fruit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fruitsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FruitResourceApi.fruitsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Fruit} [fruit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fruitsPost(fruit?: Fruit, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<Fruit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fruitsPost(fruit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FruitResourceApi.fruitsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FruitResourceApi - factory interface
 * @export
 */
export const FruitResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FruitResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {FruitResourceApiFruitsDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fruitsDelete(requestParameters: FruitResourceApiFruitsDeleteRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Set<Fruit>> {
            return localVarFp.fruitsDelete(requestParameters.fruit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fruitsGet(options?: RawAxiosRequestConfig): AxiosPromise<Set<Fruit>> {
            return localVarFp.fruitsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FruitResourceApiFruitsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fruitsPost(requestParameters: FruitResourceApiFruitsPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Set<Fruit>> {
            return localVarFp.fruitsPost(requestParameters.fruit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for fruitsDelete operation in FruitResourceApi.
 * @export
 * @interface FruitResourceApiFruitsDeleteRequest
 */
export interface FruitResourceApiFruitsDeleteRequest {
    /**
     * 
     * @type {Fruit}
     * @memberof FruitResourceApiFruitsDelete
     */
    readonly fruit?: Fruit
}

/**
 * Request parameters for fruitsPost operation in FruitResourceApi.
 * @export
 * @interface FruitResourceApiFruitsPostRequest
 */
export interface FruitResourceApiFruitsPostRequest {
    /**
     * 
     * @type {Fruit}
     * @memberof FruitResourceApiFruitsPost
     */
    readonly fruit?: Fruit
}

/**
 * FruitResourceApi - object-oriented interface
 * @export
 * @class FruitResourceApi
 * @extends {BaseAPI}
 */
export class FruitResourceApi extends BaseAPI {
    /**
     * 
     * @param {FruitResourceApiFruitsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FruitResourceApi
     */
    public fruitsDelete(requestParameters: FruitResourceApiFruitsDeleteRequest = {}, options?: RawAxiosRequestConfig) {
        return FruitResourceApiFp(this.configuration).fruitsDelete(requestParameters.fruit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FruitResourceApi
     */
    public fruitsGet(options?: RawAxiosRequestConfig) {
        return FruitResourceApiFp(this.configuration).fruitsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FruitResourceApiFruitsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FruitResourceApi
     */
    public fruitsPost(requestParameters: FruitResourceApiFruitsPostRequest = {}, options?: RawAxiosRequestConfig) {
        return FruitResourceApiFp(this.configuration).fruitsPost(requestParameters.fruit, options).then((request) => request(this.axios, this.basePath));
    }
}

